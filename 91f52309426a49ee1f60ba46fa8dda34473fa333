{
  "comments": [
    {
      "key": {
        "uuid": "7ad3c85d_4f4f153b",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/CreateServiceUser.java",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 1045122
      },
      "writtenOn": "2019-09-10T09:46:14Z",
      "side": 1,
      "message": "Why only accept RSA keys here? Gerrit supports many more formats.\n\n(sorry for the late review)",
      "range": {
        "startLine": 148,
        "startChar": 80,
        "endLine": 148,
        "endChar": 87
      },
      "revId": "91f52309426a49ee1f60ba46fa8dda34473fa333",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03623036_ca9ecfc4",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/CreateServiceUser.java",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2019-09-10T11:24:07Z",
      "side": 1,
      "message": "Yes, supporting other formats would definitely make sense. Do you know a comprehensive list of formats or a way to efficiently check all of them?\n\nIn the end this should be done by Gerrit (core) itself. Currently, there is only the issue that Gerrit creates the account before adding the SSH key, which leads to stub accounts blocking usernames, if an invalid key is given. The fix for that issue probably requires a quite heavy refactoring, so I added this check here.",
      "parentUuid": "7ad3c85d_4f4f153b",
      "range": {
        "startLine": 148,
        "startChar": 80,
        "endLine": 148,
        "endChar": 87
      },
      "revId": "91f52309426a49ee1f60ba46fa8dda34473fa333",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4be01b8d_7d90b04e",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/CreateServiceUser.java",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 1045122
      },
      "writtenOn": "2019-09-10T11:40:52Z",
      "side": 1,
      "message": "Try to run \n\n $ ssh -Q key\n\nBut this list what OpenSSH can do on your system. Gerrit\u0027s capabilities may be different.\n\nFor me this lists:\n\n $ ssh -Q key\n ssh-ed25519\n ssh-ed25519-cert-v01@openssh.com\n ssh-rsa\n ssh-dss\n ecdsa-sha2-nistp256\n ecdsa-sha2-nistp384\n ecdsa-sha2-nistp521\n ssh-rsa-cert-v01@openssh.com\n ssh-dss-cert-v01@openssh.com\n ecdsa-sha2-nistp256-cert-v01@openssh.com\n ecdsa-sha2-nistp384-cert-v01@openssh.com\n ecdsa-sha2-nistp521-cert-v01@openssh.com\n\n(Yes, those ecdsa* ones do not start with \u0027ssh-\u0027...)\n\nI don\u0027t really have a bright idea on how to *properly* validate an SSH authorized key if you can\u0027t do that by the library involved, but stopping other-than RSA like this seems really breaking current installations.",
      "parentUuid": "03623036_ca9ecfc4",
      "range": {
        "startLine": 148,
        "startChar": 80,
        "endLine": 148,
        "endChar": 87
      },
      "revId": "91f52309426a49ee1f60ba46fa8dda34473fa333",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3204a8f4_417068e5",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/CreateServiceUser.java",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2019-09-10T14:33:48Z",
      "side": 1,
      "message": "I tried to solve this in change 236453 [1].\n\n[1] https://gerrit-review.googlesource.com/c/plugins/serviceuser/+/236453",
      "parentUuid": "4be01b8d_7d90b04e",
      "range": {
        "startLine": 148,
        "startChar": 80,
        "endLine": 148,
        "endChar": 87
      },
      "revId": "91f52309426a49ee1f60ba46fa8dda34473fa333",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}