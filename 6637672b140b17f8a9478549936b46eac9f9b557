{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "80647c2e_fc0a8ff2",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/PutEmail.java",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-08-31T06:30:06Z",
      "side": 1,
      "message": "With this and with other similar places, I don\u0027t think that every user with createServiceuser capability should be able to change those parameters if it is not allowed. In our case for example every registered user is allowed to create serviceusers, since it is a self service. But we don\u0027t allow to set the email. There are however cases where a user requires an email and we as the admins will set it for them.\nMy suggestion would be to create a new capability administrateServiceusers that has admin rights for serviceusers, while craeteServiceuser remains as is. WDYT?",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cbb6822_a13809f4",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/PutEmail.java",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1040243
      },
      "writtenOn": "2022-08-31T07:05:51Z",
      "side": 1,
      "message": "I do not think there is much point of allowing create service user with credentials and ability to set owner and not allowing this capability to manage the users as delegation.\n\nI agree that the capability name is confusing, maybe should be renamed to administrateServiceUsers, however and regardless, the delegation of administrator to the capability should be consistent.\n\nThe approval of explicit fields modification is to the owner.\n\nRemember we have four permissions:\n\n1. admin\n2. service user management delegation (via the create service user capability)\n3. owner - limited to what admin allowed owner to set\n4. standard user",
      "parentUuid": "80647c2e_fc0a8ff2",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "252a5cd8_701122fb",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/PutEmail.java",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-08-31T07:45:54Z",
      "side": 1,
      "message": "As I mentioned we have exactly that usecase. In our Gerrit instances we use generated email addresses for the serviceusers. This is to allow serviceusers to push (to disable pushing by serviceusers the allowEmail option was originally added: I2dcb4acbd05aea50087cd0b9ab31fc59592d8235), but you can see from the commit that the commit was authored/committed by a serviceuser. Thus, we don\u0027t allow users/owners to set the email address. However, in a few cases we need to have exemptions due to some processes of a few teams and thus the admins still have to be able to change the email address. Since every registered user in our case can create a serviceuser, this capability is not enough to guard email address modification.\nThis is similar for other serviceuser properties. E.g. you might not allow owners to set custom HTTP passwords, e.g. to have enforced standards password strength, but in a case-by-case scenario an admin would like to grant exemptions to that rule.",
      "parentUuid": "5cbb6822_a13809f4",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01eaa8e7_85f858c4",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/RegisterServiceUser.java",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-08-31T06:30:06Z",
      "side": 1,
      "message": "This would allow every user with the createServiceuser capability to make avery account a serviceuser account setting themselves as owner and this way get access to all projects. This is a big security breach.\nOnly the user itself or an admin should be able to convert an account.",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5780e385_4cbc4767",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/RegisterServiceUser.java",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 1040243
      },
      "writtenOn": "2022-08-31T07:05:51Z",
      "side": 1,
      "message": "ok, will revert.\n\nbut are you sure? won\u0027t the below code will limit this to service users only?\n\n      Config db \u003d update.getConfig();\n      if (db.getSubsections(USER).contains(input.username)) {\n        return Response.none();\n      }",
      "parentUuid": "01eaa8e7_85f858c4",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8048eb65_4571ea95",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/RegisterServiceUser.java",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-08-31T07:45:54Z",
      "side": 1,
      "message": "The snippet you mention is checking whether the given user already is a serviceuser and if it is the case, it stops early, since the goal is already achieved.\n\nThe RegisterServiceuser command allows to make an existing account, e.g. created through LDAP, a serviceuser account. This is useful, if you want to migrate technical users managed by an external IDP to become a Gerrit internal serviceuser.",
      "parentUuid": "5780e385_4cbc4767",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62683ea1_84fe6703",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/ServiceUserCollection.java",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-08-31T06:30:06Z",
      "side": 1,
      "message": "This would allow all users with the createServiceuser capability to see all serviceusers. This should not be the case. An admin should be able to see all, but somebody who can create a serviceuser should only see the ones they own.",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55192086_a73b6a92",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/ServiceUserCollection.java",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1040243
      },
      "writtenOn": "2022-08-31T07:05:51Z",
      "side": 1,
      "message": "As I wrote, I think that create service user capability is actually delegation of managing service users, there is no point in only create user with credentials as we can set any name with any credentials and access.",
      "parentUuid": "62683ea1_84fe6703",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}