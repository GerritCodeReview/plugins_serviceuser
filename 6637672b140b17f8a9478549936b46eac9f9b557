{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a0f69900_664474c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1040243
      },
      "writtenOn": "2022-09-02T05:49:17Z",
      "side": 1,
      "message": "Hi Thomas,\n\nI do not fully understand your use case, if I can create a new user with any credentials I want, and I can also modify credentials to whatever I want, and set the owner group to whomever I want, allowing me to specify mail address of my user which is useless anyway as gerrit is not a mail server does not have any added value. I may abuse the system, so I am not sure why admin will allow me that and not trust me to set other properties of the user.\n\nThe filtering of attributes based on the configuration file is foreign to gerrit, I believe it should be entirely removed.\n\nAnyway, let\u0027s drop these patches, keep them inconsistent and not a real delegation nor security and it suites your use case somehow.\n\nHowever, please help me merge [1] into gerrit so that the owner will be able to also remove keys, I would like to assume that you agree with me that current situation in which a user can add new ssh keys but cannot remove/revoke existing key is inconsistent.\n\nThanks,\n\n[1] https://gerrit-review.googlesource.com/c/gerrit/+/343075",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fbce2287_cf10d514",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-09-05T06:42:06Z",
      "side": 1,
      "message": "Hi Alon,\n\nfirst of all, yes I agree that the owner should be able to delete SSH keys and that we should submit that change asap. Could you rebase it on top of the master branch? Thanks!\n\nEmails are special in git, because they are used as identifiers for the author committer. In Gerrit, if a user does not have an email address, that user will not be able to push any change/commit. Thus, not allowing to set an email, but allowing to create a serviceuser makes sense in a case, where you want to allow to create read-only serviceusers, i.e. serviceusers that can be used by CIs to fetch/clone, but are not allowed to push.Depending on company policies this can be the case.\n\nI am not seeing your point, that this is not really secure. But I agree that we can improve on the how permissions in the serviceuser context work by implementing the two changes that I already suggested:\n\n1) add administrateServiceuser capability (allows full serviceuser administration without being a full administrator)\n2) Remove the requirement of setting an SSH key on serviceuser creation.\n\nSince this discussion is stuck, let me pull in Sasa who is actually the maintainer of this plugin. I think it doesn\u0027t hurt to get another opinion. It might also not hurt to discuss this on the Gerrit mailing list to get opinions of other users as well.",
      "parentUuid": "a0f69900_664474c2",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "068162a2_7d976bb0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-09-05T06:44:27Z",
      "side": 1,
      "message": "Also let me say that your changes are really much appreciated! Thanks!",
      "parentUuid": "fbce2287_cf10d514",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80647c2e_fc0a8ff2",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/PutEmail.java",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-08-31T06:30:06Z",
      "side": 1,
      "message": "With this and with other similar places, I don\u0027t think that every user with createServiceuser capability should be able to change those parameters if it is not allowed. In our case for example every registered user is allowed to create serviceusers, since it is a self service. But we don\u0027t allow to set the email. There are however cases where a user requires an email and we as the admins will set it for them.\nMy suggestion would be to create a new capability administrateServiceusers that has admin rights for serviceusers, while craeteServiceuser remains as is. WDYT?",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cbb6822_a13809f4",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/PutEmail.java",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1040243
      },
      "writtenOn": "2022-08-31T07:05:51Z",
      "side": 1,
      "message": "I do not think there is much point of allowing create service user with credentials and ability to set owner and not allowing this capability to manage the users as delegation.\n\nI agree that the capability name is confusing, maybe should be renamed to administrateServiceUsers, however and regardless, the delegation of administrator to the capability should be consistent.\n\nThe approval of explicit fields modification is to the owner.\n\nRemember we have four permissions:\n\n1. admin\n2. service user management delegation (via the create service user capability)\n3. owner - limited to what admin allowed owner to set\n4. standard user",
      "parentUuid": "80647c2e_fc0a8ff2",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "252a5cd8_701122fb",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/PutEmail.java",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-08-31T07:45:54Z",
      "side": 1,
      "message": "As I mentioned we have exactly that usecase. In our Gerrit instances we use generated email addresses for the serviceusers. This is to allow serviceusers to push (to disable pushing by serviceusers the allowEmail option was originally added: I2dcb4acbd05aea50087cd0b9ab31fc59592d8235), but you can see from the commit that the commit was authored/committed by a serviceuser. Thus, we don\u0027t allow users/owners to set the email address. However, in a few cases we need to have exemptions due to some processes of a few teams and thus the admins still have to be able to change the email address. Since every registered user in our case can create a serviceuser, this capability is not enough to guard email address modification.\nThis is similar for other serviceuser properties. E.g. you might not allow owners to set custom HTTP passwords, e.g. to have enforced standards password strength, but in a case-by-case scenario an admin would like to grant exemptions to that rule.",
      "parentUuid": "5cbb6822_a13809f4",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "792c5a64_95bc09b5",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/PutEmail.java",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1040243
      },
      "writtenOn": "2022-08-31T08:22:01Z",
      "side": 1,
      "message": "I do not follow...\n\nWe have the following permissions:\n\n1. admin\n2. admin delegation (aka create service capability)\n3. owner\n4. regular user\n\nyou refer to level (3), right?\nif you allow a team (2) they can not only modify and set email but create other users with credentials as they like and use these new users. Teams should be owners and then the restrictions of configuration applies.\n\nthe (2) should be provided to IT or user that can manage the service users without having the permission to touch anything else.\n\n\u003e This is similar for other serviceuser properties.\n\u003e E.g. you might not allow owners to set custom HTTP passwords, e.g.\n\u003e to have enforced standards password strength, but in a case-by-case scenario an admin would like to grant exemptions to that rule.\n\nThere is no case-by-case scenario as the configuration supports all-or-nothing, either all owners can set email or none (for example). This get me back to the 4 levels of permissions which is the most consistent approach and does not break anything in your and my use cases.\n\n1. admin - can do everything, and set by configuration what attributes owners can modify.\n2. service user creatorcapability - can manage (create/delete/modify) service users\n3. service user owner - set by (1) or (2), can modify what (1) allows.\n4, regular users - can view service users.\n\nI believe the use case you outlined for your team is (3), and I believe that unlike what you presented the case-by-case is not supported.\n\nI am sorry, but I ask again, what am I amissing.\n\nThanks!",
      "parentUuid": "252a5cd8_701122fb",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4285dc0_8fd14d06",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/PutEmail.java",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-09-01T07:34:49Z",
      "side": 1,
      "message": "No I do not mean level (3). One functionality that the serviceuser plugin provides is that you can make creation of serviceusers a self service. We have more than 10000 users and hundreds of teams using our Gerrit instance. As admins we would not be able to support all those teams which will likely require a serviceuser for their CI in creating a serviceuser for them. Thus, we gave the createServiceuser capability to the Registered Users group. That means all users having an account in our Gerrit can create a serviceuser (level 2). However, they are only allowed to see and manage the serviceusers they themselves own (level 3). However, we don\u0027t want to give all users the permission to set an email address for their serviceusers. Thus, we use `allowEmail\u003dfalse`. With the current state that means only admins (level 1) can set an email for a serviceuser, since this and similar options do not apply for admins, which we only do by a case-by-case basis. Case-by-case here means the admins set the email on request and do not provide the owner group with the permission to do so themselves.\n\nWith this change we would not be able to keep this behaviour, since we would either have to allow all users to set an email for their serviceuser or we would have to remove the self service and make it a managed service, which we can\u0027t provide. The plugin was originally developed with the self service idea in mind and I think we should keep that.\n\nI see your usecase and thats why I propose to add the administrateServiceuser capability. In our usecase this would look like this:\n\n1. admin - Administrators group - can see all serviceusers, can do everything, and set by configuration what attributes owners can modify.\n2. serviceuser admin - Administrators group - can see all serviceusers, can do everything, but not change the configuration\n3. serviceuser creator - Registered Users - can see only serviceusers they own (level 4), can create serviceusers and will be the default owner (ownership can be taken from creator by changing the owner group)\n4. serviceuser owner - group configured for specific serviceuser - set by (1), (2) or (3), can see owned serviceusers and can modify what (1) allows.\n\nIn your case it would look like this:\n\n1. admin - Administrators group - can see all serviceusers, can do everything, and set by configuration what attributes owners can modify.\n2. serviceuser admin - IT - can see all serviceusers, can do everything, but not change the configuration\n3. serviceuser creator - IT - can see only serviceusers they own (level 4), can create serviceusers and will be the default owner (ownership can be taken from creator by changing the owner group)\n4. serviceuser owner - group configured for specific serviceuser - set by (1), (2) or (3), can see owned serviceusers and can modify what (1) allows.\n5. other users - Registered Users - All users that do not own a serviceuser will not be able to create, view or modify any serviceuser.\n\nIf in this case the IT group (or whatever it is called) and the Administrator group are identical, we could skip introducing the administrate Serviceuser capability, since then both of our usecases would already be supported.",
      "parentUuid": "792c5a64_95bc09b5",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01eaa8e7_85f858c4",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/RegisterServiceUser.java",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-08-31T06:30:06Z",
      "side": 1,
      "message": "This would allow every user with the createServiceuser capability to make avery account a serviceuser account setting themselves as owner and this way get access to all projects. This is a big security breach.\nOnly the user itself or an admin should be able to convert an account.",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5780e385_4cbc4767",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/RegisterServiceUser.java",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 1040243
      },
      "writtenOn": "2022-08-31T07:05:51Z",
      "side": 1,
      "message": "ok, will revert.\n\nbut are you sure? won\u0027t the below code will limit this to service users only?\n\n      Config db \u003d update.getConfig();\n      if (db.getSubsections(USER).contains(input.username)) {\n        return Response.none();\n      }",
      "parentUuid": "01eaa8e7_85f858c4",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8048eb65_4571ea95",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/RegisterServiceUser.java",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-08-31T07:45:54Z",
      "side": 1,
      "message": "The snippet you mention is checking whether the given user already is a serviceuser and if it is the case, it stops early, since the goal is already achieved.\n\nThe RegisterServiceuser command allows to make an existing account, e.g. created through LDAP, a serviceuser account. This is useful, if you want to migrate technical users managed by an external IDP to become a Gerrit internal serviceuser.",
      "parentUuid": "5780e385_4cbc4767",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dba230ea_3f6ca8d5",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/RegisterServiceUser.java",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 1040243
      },
      "writtenOn": "2022-08-31T08:22:01Z",
      "side": 1,
      "message": "ok, I will revert.",
      "parentUuid": "8048eb65_4571ea95",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62683ea1_84fe6703",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/ServiceUserCollection.java",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-08-31T06:30:06Z",
      "side": 1,
      "message": "This would allow all users with the createServiceuser capability to see all serviceusers. This should not be the case. An admin should be able to see all, but somebody who can create a serviceuser should only see the ones they own.",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55192086_a73b6a92",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/ServiceUserCollection.java",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1040243
      },
      "writtenOn": "2022-08-31T07:05:51Z",
      "side": 1,
      "message": "As I wrote, I think that create service user capability is actually delegation of managing service users, there is no point in only create user with credentials as we can set any name with any credentials and access.",
      "parentUuid": "62683ea1_84fe6703",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9a610f0_a5c43098",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/serviceuser/ServiceUserCollection.java",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-09-01T07:34:49Z",
      "side": 1,
      "message": "No as described in my other comment it is no such delegation. The name is to be taken literally. The capability should only allow to create serviceusers. If we would open that up serviceuser creation could not be a self service anymore.",
      "parentUuid": "55192086_a73b6a92",
      "revId": "6637672b140b17f8a9478549936b46eac9f9b557",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}